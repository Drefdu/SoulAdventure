stages:
  - prepare
  - build_and_test
  - deploy

variables:
  BUILD_NAME: SoulAdventure
  IMAGE: unityci/editor
  UNITY_DIR: $CI_PROJECT_DIR
  VERSION_NUMBER_VAR: $CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID-$CI_JOB_ID
  VERSION_BUILD_VAR: $CI_PIPELINE_IID

image: $IMAGE:$UNITY_VERSION-base-3

get-unity-version:
  image: alpine
  stage: prepare
  script:
    - export UNITY_VERSION=$(grep "m_EditorVersion:" $UNITY_DIR/ProjectSettings/ProjectVersion.txt | awk '{print $2}')
    - if [ -z "$UNITY_VERSION" ] || [[ ! "$UNITY_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+f[0-9]+$ ]]; then export UNITY_VERSION="2022.3.22f1"; fi
    - echo "UNITY_VERSION=$UNITY_VERSION" | tee prepare.env
  artifacts:
    reports:
      dotenv: prepare.env

.unity_defaults: &unity_defaults
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
  needs:
    - job: get-unity-version
      artifacts: true
  after_script:
    - chmod +x ./ci/return_license.sh && ./ci/return_license.sh
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - $UNITY_DIR/Library/
      - $UNITY_DIR/../unity-builder

.test: &test
  stage: build_and_test
  <<: *unity_defaults
  script:
    - chmod +x ./ci/test.sh && ./ci/test.sh
  artifacts:
    when: always
    expire_in: 2 weeks
  coverage: /<Linecoverage>(.*?)</Linecoverage>/

test-playmode:
  <<: *test
  variables:
    TEST_PLATFORM: playmode
    TESTING_TYPE: NUNIT

test-editmode:
  <<: *test
  variables:
    TEST_PLATFORM: editmode
    TESTING_TYPE: NUNIT

.build: &build
  stage: build_and_test
  <<: *unity_defaults
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh
  artifacts:
    paths:
      - $UNITY_DIR/Builds/

build-StandaloneLinux64:
  <<: *build
  variables:
    BUILD_TARGET: StandaloneLinux64

build-StandaloneWindows64:
  <<: *build
  variables:
    BUILD_TARGET: StandaloneWindows64

build-WebGL:
  <<: *build
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
    - apt-get update && apt-get install -y ffmpeg
  variables:
    BUILD_TARGET: WebGL

pages:
  image: alpine:latest
  stage: deploy
  script:
    - mv "$UNITY_DIR/Builds/WebGL/${BUILD_NAME}" public
  artifacts:
    paths:
      - public
  only:
    - $CI_DEFAULT_BRANCH

workflow:
  rules:
    - when: always