stages:
  - prepare
  - build_and_test
  - deploy

variables:
  BUILD_NAME: ExampleProjectName
  IMAGE: unityci/editor
  IMAGE_VERSION: 3
  UNITY_DIR: $CI_PROJECT_DIR
  VERSION_NUMBER_VAR: $CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID-$CI_JOB_ID
  VERSION_BUILD_VAR: $CI_PIPELINE_IID

image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

get-unity-version:
  image: alpine
  stage: prepare
  variables:
    GIT_DEPTH: 1
  script:
    - echo "Obteniendo versión de Unity..."
    - echo "UNITY_VERSION=$(grep 'm_EditorVersion:' $UNITY_DIR/ProjectSettings/ProjectVersion.txt | awk '{ print $2 }')" > prepare.env
  artifacts:
    reports:
      dotenv: prepare.env  # Se usa dotenv para que las variables estén disponibles en el siguiente job
    expire_in: 1 hour

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
  needs:
    - job: get-unity-version
      artifacts: true  # Asegura que el siguiente job tenga acceso a los artifacts

.unity_after_script: &unity_after_script
  after_script:
    - chmod +x ./ci/return_license.sh && ./ci/return_license.sh

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - $UNITY_DIR/Library/
      - $UNITY_DIR/../unity-builder

.license: &license
  rules:
    - if: '$UNITY_LICENSE != null || $UNITY_SERIAL != null'
      when: always

.unity_defaults: &unity_defaults
  <<:
    - *unity_before_script
    - *cache
    - *license
    - *unity_after_script

build:
  stage: build_and_test
  needs:
    - job: get-unity-version
      artifacts: true  # Permite el uso del artifact generado
  <<: *unity_defaults
  script:
    - echo "Usando versión de Unity: $UNITY_VERSION"
    - chmod +x ./ci/build.sh && ./ci/build.sh
  artifacts:
    paths:
      - $UNITY_DIR/Builds/
    expire_in: 2 weeks
  tags:
    - gitlab-org

build-StandaloneLinux64:
  <<: *build
  variables:
    BUILD_TARGET: StandaloneLinux64

workflow:
  rules:
    - when: always
